(define (rownum n) (rownum-iter n 1 1))
(define (rownum-iter n countsum count)
        (if (or (= n countsum) (< n countsum)) 
             count
            (rownum-iter n (+ countsum (+ count 1)) (+ count 1))
        )
)

(define (isedge n) 
        (or(= (isedge-iter n (- (rownum n) 1) ) 1) (= (isedge-iter n (- (rownum n) 1) ) (rownum n)))
)
(define (isedge-iter n counter)
        (if (= counter 0)
            n
            (isedge-iter (- n counter) (- counter 1))
        )
)

(define (pascal n)
        (if (isedge n) 
            1
            (+ (pascal (- n (rownum n))) (pascal (+ (- n (rownum n) ) 1)))
        )
)

(and 

    (and (= (rownum 1) 1)
         (= (rownum 2) 2)
         (= (rownum 3) 2)
         (= (rownum 4) 3)
         (= (rownum 5) 3)
    	 (= (rownum 6) 3)
    	 (= (rownum 7) 4)
         (= (rownum 8) 4)
         (= (rownum 9) 4)
    	 (= (rownum 10) 4)
    	 (= (rownum 11) 5)
    	 (= (rownum 12) 5)
         (= (rownum 13) 5)
         (= (rownum 14) 5)
    	 (= (rownum 15) 5)
    )

    (and (equal? (isedge 1) #t)
         (equal? (isedge 2) #t)
         (equal? (isedge 3) #t)
         (equal? (isedge 4) #t)
         (equal? (isedge 5) #f)
    	 (equal? (isedge 6) #t)
    	 (equal? (isedge 7) #t)
         (equal? (isedge 8) #f)
         (equal? (isedge 9) #f)
    	 (equal? (isedge 10) #t)
    	 (equal? (isedge 11) #t)
    	 (equal? (isedge 12) #f)
         (equal? (isedge 13) #f)
         (equal? (isedge 14) #f)
    	 (equal? (isedge 15) #t)
    )

    (and (= (pascal 1) 1)
         (= (pascal 2) 1)
         (= (pascal 3) 1)
         (= (pascal 4) 1)
         (= (pascal 5) 2)
    	 (= (pascal 6) 1)
    	 (= (pascal 7) 1)
         (= (pascal 8) 3)
         (= (pascal 9) 3)
    	 (= (pascal 10) 1)
    	 (= (pascal 11) 1)
    	 (= (pascal 12) 4)
         (= (pascal 13) 6)
         (= (pascal 14) 4)
    	 (= (pascal 15) 1)
    )
)
